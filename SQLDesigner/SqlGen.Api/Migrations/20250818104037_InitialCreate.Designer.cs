// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SqlDesigner.Api.Data;

#nullable disable

namespace SqlGen.Api.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250818104037_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SqlDesigner.Api.Domain.CheckConstraint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Expression")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("TableId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TableId");

                    b.ToTable("CheckConstraints");
                });

            modelBuilder.Entity("SqlDesigner.Api.Domain.Column", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DataType")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int>("DefaultKind")
                        .HasColumnType("int");

                    b.Property<string>("DefaultSql")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdentityIncrement")
                        .HasColumnType("int");

                    b.Property<int>("IdentitySeed")
                        .HasColumnType("int");

                    b.Property<bool>("IsIdentity")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNullable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPrimaryKey")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUnique")
                        .HasColumnType("bit");

                    b.Property<int?>("Length")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("Precision")
                        .HasColumnType("int");

                    b.Property<int?>("PrimaryKeyOrder")
                        .HasColumnType("int");

                    b.Property<int?>("Scale")
                        .HasColumnType("int");

                    b.Property<int>("TableId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TableId");

                    b.ToTable("Columns");
                });

            modelBuilder.Entity("SqlDesigner.Api.Domain.ForeignKey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("OnDeleteAction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefSchema")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasDefaultValue("dbo");

                    b.Property<string>("RefTable")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("TableId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TableId");

                    b.ToTable("ForeignKeys");
                });

            modelBuilder.Entity("SqlDesigner.Api.Domain.ForeignKeyColumn", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ColumnName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("ForeignKeyId")
                        .HasColumnType("int");

                    b.Property<string>("RefColumnName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("ForeignKeyId");

                    b.ToTable("ForeignKeyColumns");
                });

            modelBuilder.Entity("SqlDesigner.Api.Domain.Index", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("IncludeColumnsCsv")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsUnique")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("TableId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TableId");

                    b.ToTable("Indexes");
                });

            modelBuilder.Entity("SqlDesigner.Api.Domain.IndexColumn", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ColumnName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("Descending")
                        .HasColumnType("bit");

                    b.Property<int>("IndexId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IndexId");

                    b.ToTable("IndexColumns");
                });

            modelBuilder.Entity("SqlDesigner.Api.Domain.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("SqlDesigner.Api.Domain.Table", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PrimaryKeyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("Schema")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasDefaultValue("dbo");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId", "Schema", "Name")
                        .IsUnique();

                    b.ToTable("Tables");
                });

            modelBuilder.Entity("SqlDesigner.Api.Domain.UniqueConstraint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ColumnsCsv")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("TableId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TableId");

                    b.ToTable("UniqueConstraints");
                });

            modelBuilder.Entity("SqlDesigner.Api.Domain.CheckConstraint", b =>
                {
                    b.HasOne("SqlDesigner.Api.Domain.Table", "Table")
                        .WithMany("CheckConstraints")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Table");
                });

            modelBuilder.Entity("SqlDesigner.Api.Domain.Column", b =>
                {
                    b.HasOne("SqlDesigner.Api.Domain.Table", "Table")
                        .WithMany("Columns")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Table");
                });

            modelBuilder.Entity("SqlDesigner.Api.Domain.ForeignKey", b =>
                {
                    b.HasOne("SqlDesigner.Api.Domain.Table", "Table")
                        .WithMany("ForeignKeys")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Table");
                });

            modelBuilder.Entity("SqlDesigner.Api.Domain.ForeignKeyColumn", b =>
                {
                    b.HasOne("SqlDesigner.Api.Domain.ForeignKey", "ForeignKey")
                        .WithMany("Columns")
                        .HasForeignKey("ForeignKeyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ForeignKey");
                });

            modelBuilder.Entity("SqlDesigner.Api.Domain.Index", b =>
                {
                    b.HasOne("SqlDesigner.Api.Domain.Table", "Table")
                        .WithMany("Indexes")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Table");
                });

            modelBuilder.Entity("SqlDesigner.Api.Domain.IndexColumn", b =>
                {
                    b.HasOne("SqlDesigner.Api.Domain.Index", "Index")
                        .WithMany("Columns")
                        .HasForeignKey("IndexId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Index");
                });

            modelBuilder.Entity("SqlDesigner.Api.Domain.Table", b =>
                {
                    b.HasOne("SqlDesigner.Api.Domain.Project", "Project")
                        .WithMany("Tables")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("SqlDesigner.Api.Domain.UniqueConstraint", b =>
                {
                    b.HasOne("SqlDesigner.Api.Domain.Table", "Table")
                        .WithMany("UniqueConstraints")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Table");
                });

            modelBuilder.Entity("SqlDesigner.Api.Domain.ForeignKey", b =>
                {
                    b.Navigation("Columns");
                });

            modelBuilder.Entity("SqlDesigner.Api.Domain.Index", b =>
                {
                    b.Navigation("Columns");
                });

            modelBuilder.Entity("SqlDesigner.Api.Domain.Project", b =>
                {
                    b.Navigation("Tables");
                });

            modelBuilder.Entity("SqlDesigner.Api.Domain.Table", b =>
                {
                    b.Navigation("CheckConstraints");

                    b.Navigation("Columns");

                    b.Navigation("ForeignKeys");

                    b.Navigation("Indexes");

                    b.Navigation("UniqueConstraints");
                });
#pragma warning restore 612, 618
        }
    }
}
